	.TITLE test
	.PSECT PMAIN
	; бит CLK (часы для плеера)
	CLKMSK=1
	; бит IN (входные данные для плеера)
	INMSK=2
	; бит OUT (выходные данные плеера)
	OUTMSK=1
	; Начальная задержка в 1 секунду
	STARTDL=23310.
.=.+100000
	jmp main
print:
	nop
	rts pc
	; --------
	; Задержка
	; r0 - сколько раз по 42.9 микросекунд ждать
	; портит: r0
delay:
	mov r0,@#177706
	mov #177712,r0
	mov #24,(r0)	; 24 - запуск таймера + режим установки бита 7 при переходе через ноль
0wait:
	tstb (r0)
	bpl 0wait		; если бит 7 не установлен, то байт положителный
	rts pc

	; --------
	; Задержка при посылке одного бита
	; определяет скорость обмена
	; должна сохранять Z
	; портит: -
xfcdl0:	
	nop
	nop
	nop
	nop
	nop
	rts pc

xfcdly:
	call xfcdl0
	br xfcdl0

	; --------
	; Посылка/передача одного бита
	; Флаг C бит для передачи и принятый бит
	; портит: -
bitrw:
	bcs 1clk
	mov #0,@#177714			; сначала бит для передачи = 0 и часы = 0
	mov #CLKMSK,@#177714	; теперь  бит для передачи = 0 и часы = 1 (теперь плеер может считывать бит)
	bit #OUTMSK,@#177714    ; считывает что передал плеер
	beq 1out0               ; оставляем C = 0 потому что плеер передал 0
	sec                     ; плеер передал 1
1out0:	
	call xfcdly			    ; держим часы 1
	mov #0,@#177714			; держим бит для передачи = 0, но часы = 0
	br 0exit
1clk:
	mov #INMSK,@#177714			; сначала бит для передачи = 1 и часы = 0
	mov #INMSK+CLKMSK,@#177714	; теперь  бит для передачи = 1 и часы = 1 (теперь плеер может считывать бит)
	bit #OUTMSK,@#177714		; считывает что передал плеер
	bne 1out1					; оставляем C = 1 потому что плеер передал 1
	clc							; плеер передал 0
1out1:	
	call xfcdly				; держим часы 1
	mov #INMSK,@#177714			; держим бит для передачи = 1, но часы = 0
0exit:
	call xfcdly				    ; держим часы 0
	rts pc

	; --------
	; Послать один байт
	; r0 - байт
	; портит: r0, r1
sendb:
	mov #8.,r1
0loop:
	rorb r0
	call bitrw
	sob r1, 0loop
	rts pc

	; --------
	; Принять один байт
	; r0 - байт
	; портит: r0, r1
recvb:
	clr r0
	mov #8.,r1
1loop:
	clc						; приём байт происходит подачей команды CMD_NOP плееру
	call bitrw
	rorb r0
	sob r1, 1loop
	rts pc

	; --------
	; Дождаться ответа плеера, где он скажет сколько байт ещё нужно считать
	; Внимание: много команд возвращает длину 0, то есть дополнительных данных нет, 
	; это в частности означает, что не стоит делать SOB по длине без проверки на ноль.
	; r0 - нужно принять число байт
	; портит: -
getlen:
	call  recvb
	tstb r0
	bpl getlen
	bic #177600,r0
	rts pc

	; ===================================================================
	; Обработка команд.
	; -------------------------------------------------------------------
	; Самый длинный ответ плеера не больше 40 символов. Для примера используем этот буфер.
buf=4000
	; -------------------------------------------------------------------
	; CMD_NOP, код 0
	; ничего не делает, используется неявно внутри recvb - эта команда заставляет
	; плеер передать байт, который у него возможно есть в очереди.
	; -------------------------------------------------------------------
	; CMD_RESET, код 1
	; ничего на самом деле не делает, но возвращает строку с версией прошивки.
	; Хороший кандидат для проверки функционирования связи с плеером.
	; Длина возвращаемой строки не больше 40 символов. 
creset:
	; послать команду CMD_RESET
	mov #1,r0
	call  sendb
	; прочитать длину ответа
	call getlen
	tst r0
	beq err
	; будем писать строку ответа в buf
	mov #buf,r3
	mov r0,r2
0crst:	
	call recvb
	movb r0,(r3)+
	sob r2,0crst
	; заканчиваем строку нулевым байтом
	clrb (r3)
	; вывести строку из buf на экран
	mov #buf,r0
	mov #2,r5
	call print
	rts pc
	; -------------------------------------------------------------------
	; CMD_GET_MODEL, код 2
	; возвращает строку с названием модели привода CDROM.
	; Длина возвращаемой строки не больше 40 символов. 
cmodel:
	; послать команду CMD_GET_MODEL
	mov #2,r0
	call  sendb
	; прочитать длину ответа
	call getlen
	tst r0
	beq err
	; будем писать строку ответа в buf
	mov #buf,r3
	mov r0,r2
0cmdl:	
	call recvb
	movb r0,(r3)+
	sob r2,0cmdl
	; заканчиваем строку нулевым байтом
	clrb (r3)
	; вывести строку из buf на экран
	mov #buf,r0
	mov #2,r5
	call print
	rts pc

	; ===================================================================
	; ошибка
err:
	; вывести сообщение
	; print("Ответ плеера содежит длину 0, которая недопустима для текущей команды.")
	halt
	; ===================================================================
main:
	; стек
	mov #1000,sp
	; Начальный сброс: часы 1, ждём ~ секунду, часы 1
	mov #1, @#177714
	; Обязательно. Небольшая задержка чтобы плеер успел приготовиться
	; даже если таймер сработает на второй раз это не имеет значения.
	mov #STARTDL,r0
	call delay
	mov #0, @#177714

	; ============
	; тестовая часть
	; чистим экран
	mov #40000,r0
	mov #20000,r1
2loop:
	clr (r0)+
	sob r1, 2loop

	; тест CMD_RESET
	call creset
	call cmodel
	br .
	.END

